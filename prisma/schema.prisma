generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Tables NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tables principales
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(TEACHER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  accounts Account[]
  sessions Session[]
  classes  Class[]   // Classes enseignées par le professeur

  @@map("users")
}

model Student {
  id              String        @id @default(cuid())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  placeOfBirth    String?
  gender          Gender?
  address         String?
  city            String?
  postalCode      String?
  phone           String?
  email           String?       @unique
  parentName      String
  parentPhone     String
  parentEmail     String
  emergencyContact String?
  emergencyPhone  String?
  medicalInfo     String?
  enrollmentDate  DateTime      @default(now())
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  studentClasses StudentClass[]

  @@map("students")
}

model Class {
  id          String   @id @default(cuid())
  name        String   @unique // ex: "6ème A", "CM2", "Terminale S"
  level       String   // ex: "6ème", "CM2", "Terminale"
  section     String?  // ex: "A", "B", "S", "ES"
  schoolYear  String   // ex: "2023-2024"
  maxStudents Int      @default(30)
  teacherId   String?  // Professeur principal
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher        User?          @relation(fields: [teacherId], references: [id])
  studentClasses StudentClass[]

  @@map("classes")
}

model StudentClass {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("student_classes")
}

// Enums
enum UserRole {
  ADMIN
  TEACHER
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
